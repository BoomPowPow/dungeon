!function(Q,B){"object"==typeof exports&&"object"==typeof module?module.exports=B():"function"==typeof define&&define.amd?define([],B):"object"==typeof exports?exports.Dungeon=B():Q.Dungeon=B()}("undefined"!=typeof self?self:this,function(){return function(Q){function B(F){if(U[F])return U[F].exports;var I=U[F]={i:F,l:!1,exports:{}};return Q[F].call(I.exports,I,I.exports,B),I.l=!0,I.exports}var U={};return B.m=Q,B.c=U,B.d=function(Q,U,F){B.o(Q,U)||Object.defineProperty(Q,U,{configurable:!1,enumerable:!0,get:F})},B.n=function(Q){var U=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(U,"a",U),U},B.o=function(Q,B){return Object.prototype.hasOwnProperty.call(Q,B)},B.p="",B(B.s=1)}([function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nvar TILES = {\n  EMPTY: 0,\n  WALL: 1,\n  FLOOR: 2,\n  DOOR: 3\n};\n\nexports.default = TILES;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdGlsZXMuanM/MWIzMCJdLCJuYW1lcyI6WyJUSUxFUyIsIkVNUFRZIiwiV0FMTCIsIkZMT09SIiwiRE9PUiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFNQSxRQUFRO0FBQ1pDLFNBQU8sQ0FESztBQUVaQyxRQUFNLENBRk07QUFHWkMsU0FBTyxDQUhLO0FBSVpDLFFBQU07QUFKTSxDQUFkOztrQkFPZUosSyIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgVElMRVMgPSB7XHJcbiAgRU1QVFk6IDAsXHJcbiAgV0FMTDogMSxcclxuICBGTE9PUjogMixcclxuICBET09SOiAzXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUSUxFUztcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3RpbGVzLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nmodule.exports = __webpack_require__(2).default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/OTU1MiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSIsImRlZmF1bHQiXSwibWFwcGluZ3MiOiI7O0FBQUFBLE9BQU9DLE9BQVAsR0FBaUIsbUJBQUFDLENBQVEsQ0FBUixFQUF3QkMsT0FBekMiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vRHVuZ2Vvbi5qc1wiKS5kZWZhdWx0O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _utils = __webpack_require__(3);\n\nvar _Room = __webpack_require__(4);\n\nvar _Room2 = _interopRequireDefault(_Room);\n\nvar _tiles = __webpack_require__(0);\n\nvar _tiles2 = _interopRequireDefault(_tiles);\n\nvar _debug = __webpack_require__(5);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nvar Dungeon = function () {\n  function Dungeon() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Dungeon);\n\n    config = Object.assign({}, {\n      width: 50,\n      height: 50,\n      rooms: {\n        width: { min: 5, max: 15, onlyOdd: false, onlyEven: false },\n        height: { min: 5, max: 15, onlyOdd: false, onlyEven: false },\n        maxArea: 150,\n        maxRooms: 50\n      }\n    }, config);\n\n    // Avoid an impossible maxArea\n    var minArea = config.rooms.width.min * config.rooms.height.min;\n    if (config.rooms.maxArea < minArea) config.rooms.maxArea = minArea;\n\n    this.width = config.width;\n    this.height = config.height;\n    this.roomConfig = config.rooms;\n    this.rooms = [];\n\n    // 2D grid matching map dimensions where every element contains an array of all the rooms in\n    // that location\n    this.roomGrid = [];\n\n    this.generate();\n    this.tiles = this.getTiles();\n  }\n\n  _createClass(Dungeon, [{\n    key: "drawToConsole",\n    value: function drawToConsole(config) {\n      (0, _debug.debugMap)(this, config);\n    }\n  }, {\n    key: "generate",\n    value: function generate() {\n      this.rooms = [];\n      this.roomGrid = [];\n\n      for (var y = 0; y < this.height; y++) {\n        this.roomGrid.push([]);\n        for (var x = 0; x < this.width; x++) {\n          this.roomGrid[y].push([]);\n        }\n      }\n\n      // Seed the map with a starting randomly sized room in the center of the map\n      var room = this.createRandomRoom();\n      room.setPosition(Math.floor(this.width / 2) - Math.floor(room.width / 2), Math.floor(this.height / 2) - Math.floor(room.height / 2));\n      this.addRoom(room);\n\n      // Continue generating rooms until we hit our cap or have hit our maximum iterations (generally\n      // due to not being able to fit any more rooms in the map)\n      var i = this.roomConfig.maxRooms * 5;\n      while (this.rooms.length < this.roomConfig.maxRooms && i > 0) {\n        this.generateRoom();\n        i -= 1;\n      }\n\n      // Now we want to randomly add doors between some of the rooms and other rooms they touch\n      for (var _i = 0; _i < this.rooms.length; _i++) {\n        // Find all rooms that we could connect with this one\n        var targets = this.getPotentiallyTouchingRooms(this.rooms[_i]);\n        for (var j = 0; j < targets.length; j++) {\n          // Make sure the rooms aren\'t already connected with a door\n          if (!this.rooms[_i].isConnectedTo(targets[j])) {\n            // 20% chance we add a door connecting the rooms\n            if (Math.random() < 0.2) {\n              var _findNewDoorLocation = this.findNewDoorLocation(this.rooms[_i], targets[j]),\n                  _findNewDoorLocation2 = _slicedToArray(_findNewDoorLocation, 2),\n                  door1 = _findNewDoorLocation2[0],\n                  door2 = _findNewDoorLocation2[1];\n\n              this.addDoor(door1);\n              this.addDoor(door2);\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: "getRoomAt",\n    value: function getRoomAt(x, y) {\n      if (x < 0 || y < 0 || x >= this.width || y >= this.height) return null;else return this.roomGrid[y][x][0]; // Assumes 1 room per tile, which is valid for now\n    }\n  }, {\n    key: "getMappedTiles",\n    value: function getMappedTiles() {\n      var tileMapping = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      tileMapping = Object.assign({}, { empty: 0, wall: 1, floor: 2, door: 3 }, tileMapping);\n      return this.tiles.map(function (row) {\n        return row.map(function (tile) {\n          if (tile === _tiles2.default.EMPTY) return tileMapping.empty;else if (tile === _tiles2.default.WALL) return tileMapping.wall;else if (tile === _tiles2.default.FLOOR) return tileMapping.floor;else if (tile === _tiles2.default.DOOR) return tileMapping.door;\n        });\n      });\n    }\n  }, {\n    key: "addRoom",\n    value: function addRoom(room) {\n      // if the room won\'t fit, we don\'t add it\n      if (!this.canFitRoom(room)) return false;\n\n      this.rooms.push(room);\n\n      // Update all tiles in the roomGrid to indicate that this room is sitting on them\n      for (var y = room.top; y <= room.bottom; y++) {\n        for (var x = room.left; x <= room.right; x++) {\n          this.roomGrid[y][x].push(room);\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: "canFitRoom",\n    value: function canFitRoom(room) {\n      // Make sure the room fits inside the dungeon\n      if (room.x < 0 || room.x + room.width > this.width - 1) return false;\n      if (room.y < 0 || room.y + room.height > this.height - 1) return false;\n\n      // Make sure this room doesn\'t intersect any existing rooms\n      for (var i = 0; i < this.rooms.length; i++) {\n        if (room.overlaps(this.rooms[i])) return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: "createRandomRoom",\n    value: function createRandomRoom() {\n      var width = 0;\n      var height = 0;\n      var area = 0;\n\n      // Find width and height using min/max sizes while keeping under the maximum area\n      var config = this.roomConfig;\n      do {\n        width = (0, _utils.randomInteger)(config.width.min, config.width.max, {\n          onlyEven: config.width.onlyEven,\n          onlyOdd: config.width.onlyOdd\n        });\n        height = (0, _utils.randomInteger)(config.height.min, config.height.max, {\n          onlyEven: config.height.onlyEven,\n          onlyOdd: config.height.onlyOdd\n        });\n        area = width * height;\n      } while (area > config.maxArea);\n\n      return new _Room2.default(width, height);\n    }\n  }, {\n    key: "generateRoom",\n    value: function generateRoom() {\n      var room = this.createRandomRoom();\n\n      // Only allow 150 tries at placing the room\n      var i = 150;\n      while (i > 0) {\n        // Attempt to find another room to attach this one to\n        var result = this.findRoomAttachment(room);\n\n        room.setPosition(result.x, result.y);\n        // Try to add it. If successful, add the door between the rooms and break the loop.\n        if (this.addRoom(room)) {\n          var _findNewDoorLocation3 = this.findNewDoorLocation(room, result.target),\n              _findNewDoorLocation4 = _slicedToArray(_findNewDoorLocation3, 2),\n              door1 = _findNewDoorLocation4[0],\n              door2 = _findNewDoorLocation4[1];\n\n          this.addDoor(door1);\n          this.addDoor(door2);\n          break;\n        }\n\n        i -= 1;\n      }\n    }\n  }, {\n    key: "getTiles",\n    value: function getTiles() {\n      // Create the full map for the whole dungeon\n      var tiles = Array(this.height);\n      for (var y = 0; y < this.height; y++) {\n        tiles[y] = Array(this.width);\n        for (var x = 0; x < this.width; x++) {\n          tiles[y][x] = _tiles2.default.EMPTY;\n        }\n      }\n\n      // Fill in the map with details from each room\n      for (var i = 0; i < this.rooms.length; i++) {\n        var r = this.rooms[i];\n        for (var _y = 0; _y < r.height; _y++) {\n          for (var _x3 = 0; _x3 < r.width; _x3++) {\n            tiles[_y + r.y][_x3 + r.x] = r.tiles[_y][_x3];\n          }\n        }\n      }\n\n      return tiles;\n    }\n  }, {\n    key: "getPotentiallyTouchingRooms",\n    value: function getPotentiallyTouchingRooms(room) {\n      var touchingRooms = [];\n\n      // function that checks the list of rooms at a point in our grid for any potential touching\n      // rooms\n      var checkRoomList = function checkRoomList(x, y, rg) {\n        var r = rg[y][x];\n        for (var i = 0; i < r.length; i++) {\n          // make sure this room isn\'t the one we\'re searching around and that it isn\'t already in the\n          // list\n          if (r[i] != room && touchingRooms.indexOf(r[i]) < 0) {\n            // make sure this isn\'t a corner of the room (doors can\'t go into corners)\n            var lx = x - r[i].x;\n            var ly = y - r[i].y;\n            if (lx > 0 && lx < r[i].width - 1 || ly > 0 && ly < r[i].height - 1) {\n              touchingRooms.push(r[i]);\n            }\n          }\n        }\n      };\n\n      // iterate the north and south walls, looking for other rooms in those tile locations\n      for (var x = room.x + 1; x < room.x + room.width - 1; x++) {\n        checkRoomList(x, room.y, this.roomGrid);\n        checkRoomList(x, room.y + room.height - 1, this.roomGrid);\n      }\n\n      // iterate the west and east walls, looking for other rooms in those tile locations\n      for (var y = room.y + 1; y < room.y + room.height - 1; y++) {\n        checkRoomList(room.x, y, this.roomGrid);\n        checkRoomList(room.x + room.width - 1, y, this.roomGrid);\n      }\n\n      return touchingRooms;\n    }\n  }, {\n    key: "findNewDoorLocation",\n    value: function findNewDoorLocation(room1, room2) {\n      var door1 = { x: -1, y: -1 };\n      var door2 = { x: -1, y: -1 };\n\n      if (room1.y === room2.y - room1.height) {\n        // North\n        door1.x = door2.x = (0, _utils.randomInteger)(Math.floor(Math.max(room2.left, room1.left) + 1), Math.floor(Math.min(room2.right, room1.right) - 1));\n        door1.y = room1.y + room1.height - 1;\n        door2.y = room2.y;\n      } else if (room1.x == room2.x - room1.width) {\n        // West\n        door1.x = room1.x + room1.width - 1;\n        door2.x = room2.x;\n        door1.y = door2.y = (0, _utils.randomInteger)(Math.floor(Math.max(room2.top, room1.top) + 1), Math.floor(Math.min(room2.bottom, room1.bottom) - 1));\n      } else if (room1.x == room2.x + room2.width) {\n        // East\n        door1.x = room1.x;\n        door2.x = room2.x + room2.width - 1;\n        door1.y = door2.y = (0, _utils.randomInteger)(Math.floor(Math.max(room2.top, room1.top) + 1), Math.floor(Math.min(room2.bottom, room1.bottom) - 1));\n      } else if (room1.y == room2.y + room2.height) {\n        // South\n        door1.x = door2.x = (0, _utils.randomInteger)(Math.floor(Math.max(room2.left, room1.left) + 1), Math.floor(Math.min(room2.right, room1.right) - 1));\n        door1.y = room1.y;\n        door2.y = room2.y + room2.height - 1;\n      }\n\n      return [door1, door2];\n    }\n  }, {\n    key: "findRoomAttachment",\n    value: function findRoomAttachment(room) {\n      var r = (0, _utils.randomPick)(this.rooms);\n\n      var x = 0;\n      var y = 0;\n\n      // Randomly position this room on one of the sides of the random room\n      switch ((0, _utils.randomInteger)(0, 3)) {\n        // north\n        case 0:\n          x = (0, _utils.randomInteger)(r.x - room.width + 3, r.x + r.width - 2);\n          y = r.y - room.height;\n          break;\n        // west\n        case 1:\n          x = r.x - room.width;\n          y = (0, _utils.randomInteger)(r.y - room.height + 3, r.y + r.height - 2);\n          break;\n        // east\n        case 2:\n          x = r.x + r.width;\n          y = (0, _utils.randomInteger)(r.y - room.height + 3, r.y + r.height - 2);\n          break;\n        // south\n        case 3:\n          x = (0, _utils.randomInteger)(r.x - room.width + 3, r.x + r.width - 2);\n          y = r.y + r.height;\n          break;\n      }\n\n      // Return the position for this new room and the target room\n      return {\n        x: x,\n        y: y,\n        target: r\n      };\n    }\n  }, {\n    key: "addDoor",\n    value: function addDoor(doorPos) {\n      // Get all the rooms at the location of the door\n      var rooms = this.roomGrid[doorPos.y][doorPos.x];\n      for (var i = 0; i < rooms.length; i++) {\n        var r = rooms[i];\n\n        // convert the door position from world space to room space\n        var x = doorPos.x - r.x;\n        var y = doorPos.y - r.y;\n\n        // set the tile to be a door\n        r.tiles[y][x] = _tiles2.default.DOOR;\n      }\n    }\n  }]);\n\n  return Dungeon;\n}();\n\nexports.default = Dungeon;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.randomInteger = randomInteger;\nexports.randomEvenInteger = randomEvenInteger;\nexports.randomOddInteger = randomOddInteger;\nexports.randomPick = randomPick;\nfunction randomInteger(min, max) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$onlyOdd = _ref.onlyOdd,\n      onlyOdd = _ref$onlyOdd === undefined ? false : _ref$onlyOdd,\n      _ref$onlyEven = _ref.onlyEven,\n      onlyEven = _ref$onlyEven === undefined ? false : _ref$onlyEven;\n\n  if (onlyOdd) return randomOddInteger(min, max);else if (onlyEven) return randomEvenInteger(min, max);else return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction randomEvenInteger(min, max) {\n  if (min % 2 !== 0 && min < max) min++;\n  if (max % 2 !== 0 && max > min) max--;\n  var range = (max - min) / 2;\n  return Math.floor(Math.random() * (range + 1)) * 2 + min;\n}\n\nfunction randomOddInteger(min, max) {\n  if (min % 2 === 0) min++;\n  if (max % 2 === 0) max--;\n  var range = (max - min) / 2;\n  return Math.floor(Math.random() * (range + 1)) * 2 + min;\n}\n\nfunction randomPick(array) {\n  return array[randomInteger(0, array.length - 1)];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMuanM/MmZmOCJdLCJuYW1lcyI6WyJyYW5kb21JbnRlZ2VyIiwicmFuZG9tRXZlbkludGVnZXIiLCJyYW5kb21PZGRJbnRlZ2VyIiwicmFuZG9tUGljayIsIm1pbiIsIm1heCIsIm9ubHlPZGQiLCJvbmx5RXZlbiIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInJhbmdlIiwiYXJyYXkiLCJsZW5ndGgiXSwibWFwcGluZ3MiOiI7Ozs7O1FBQWdCQSxhLEdBQUFBLGE7UUFNQUMsaUIsR0FBQUEsaUI7UUFPQUMsZ0IsR0FBQUEsZ0I7UUFPQUMsVSxHQUFBQSxVO0FBcEJULFNBQVNILGFBQVQsQ0FBdUJJLEdBQXZCLEVBQTRCQyxHQUE1QixFQUE2RTtBQUFBLGlGQUFKLEVBQUk7QUFBQSwwQkFBMUNDLE9BQTBDO0FBQUEsTUFBMUNBLE9BQTBDLGdDQUFoQyxLQUFnQztBQUFBLDJCQUF6QkMsUUFBeUI7QUFBQSxNQUF6QkEsUUFBeUIsaUNBQWQsS0FBYzs7QUFDbEYsTUFBSUQsT0FBSixFQUFhLE9BQU9KLGlCQUFpQkUsR0FBakIsRUFBc0JDLEdBQXRCLENBQVAsQ0FBYixLQUNLLElBQUlFLFFBQUosRUFBYyxPQUFPTixrQkFBa0JHLEdBQWxCLEVBQXVCQyxHQUF2QixDQUFQLENBQWQsS0FDQSxPQUFPRyxLQUFLQyxLQUFMLENBQVdELEtBQUtFLE1BQUwsTUFBaUJMLE1BQU1ELEdBQU4sR0FBWSxDQUE3QixJQUFrQ0EsR0FBN0MsQ0FBUDtBQUNOOztBQUVNLFNBQVNILGlCQUFULENBQTJCRyxHQUEzQixFQUFnQ0MsR0FBaEMsRUFBcUM7QUFDMUMsTUFBSUQsTUFBTSxDQUFOLEtBQVksQ0FBWixJQUFpQkEsTUFBTUMsR0FBM0IsRUFBZ0NEO0FBQ2hDLE1BQUlDLE1BQU0sQ0FBTixLQUFZLENBQVosSUFBaUJBLE1BQU1ELEdBQTNCLEVBQWdDQztBQUNoQyxNQUFNTSxRQUFRLENBQUNOLE1BQU1ELEdBQVAsSUFBYyxDQUE1QjtBQUNBLFNBQU9JLEtBQUtDLEtBQUwsQ0FBV0QsS0FBS0UsTUFBTCxNQUFpQkMsUUFBUSxDQUF6QixDQUFYLElBQTBDLENBQTFDLEdBQThDUCxHQUFyRDtBQUNEOztBQUVNLFNBQVNGLGdCQUFULENBQTBCRSxHQUExQixFQUErQkMsR0FBL0IsRUFBb0M7QUFDekMsTUFBSUQsTUFBTSxDQUFOLEtBQVksQ0FBaEIsRUFBbUJBO0FBQ25CLE1BQUlDLE1BQU0sQ0FBTixLQUFZLENBQWhCLEVBQW1CQTtBQUNuQixNQUFNTSxRQUFRLENBQUNOLE1BQU1ELEdBQVAsSUFBYyxDQUE1QjtBQUNBLFNBQU9JLEtBQUtDLEtBQUwsQ0FBV0QsS0FBS0UsTUFBTCxNQUFpQkMsUUFBUSxDQUF6QixDQUFYLElBQTBDLENBQTFDLEdBQThDUCxHQUFyRDtBQUNEOztBQUVNLFNBQVNELFVBQVQsQ0FBb0JTLEtBQXBCLEVBQTJCO0FBQ2hDLFNBQU9BLE1BQU1aLGNBQWMsQ0FBZCxFQUFpQlksTUFBTUMsTUFBTixHQUFlLENBQWhDLENBQU4sQ0FBUDtBQUNEIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcmFuZG9tSW50ZWdlcihtaW4sIG1heCwgeyBvbmx5T2RkID0gZmFsc2UsIG9ubHlFdmVuID0gZmFsc2UgfSA9IHt9KSB7XHJcbiAgaWYgKG9ubHlPZGQpIHJldHVybiByYW5kb21PZGRJbnRlZ2VyKG1pbiwgbWF4KTtcclxuICBlbHNlIGlmIChvbmx5RXZlbikgcmV0dXJuIHJhbmRvbUV2ZW5JbnRlZ2VyKG1pbiwgbWF4KTtcclxuICBlbHNlIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkgKyBtaW4pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tRXZlbkludGVnZXIobWluLCBtYXgpIHtcclxuICBpZiAobWluICUgMiAhPT0gMCAmJiBtaW4gPCBtYXgpIG1pbisrO1xyXG4gIGlmIChtYXggJSAyICE9PSAwICYmIG1heCA+IG1pbikgbWF4LS07XHJcbiAgY29uc3QgcmFuZ2UgPSAobWF4IC0gbWluKSAvIDI7XHJcbiAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChyYW5nZSArIDEpKSAqIDIgKyBtaW47XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByYW5kb21PZGRJbnRlZ2VyKG1pbiwgbWF4KSB7XHJcbiAgaWYgKG1pbiAlIDIgPT09IDApIG1pbisrO1xyXG4gIGlmIChtYXggJSAyID09PSAwKSBtYXgtLTtcclxuICBjb25zdCByYW5nZSA9IChtYXggLSBtaW4pIC8gMjtcclxuICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKHJhbmdlICsgMSkpICogMiArIG1pbjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbVBpY2soYXJyYXkpIHtcclxuICByZXR1cm4gYXJyYXlbcmFuZG9tSW50ZWdlcigwLCBhcnJheS5sZW5ndGggLSAxKV07XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3V0aWxzLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _tiles = __webpack_require__(0);\n\nvar _tiles2 = _interopRequireDefault(_tiles);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nvar Room = function () {\n  function Room(width, height) {\n    _classCallCheck(this, Room);\n\n    this.width = width;\n    this.height = height;\n\n    this.setPosition(0, 0);\n\n    this.doors = [];\n    this.tiles = [];\n\n    // Surround the room with walls, and fill the rest with floors.\n    for (var y = 0; y < this.height; y++) {\n      var row = [];\n      for (var x = 0; x < this.width; x++) {\n        if (y == 0 || y == this.height - 1 || x == 0 || x == this.width - 1) {\n          row.push(_tiles2.default.WALL);\n        } else {\n          row.push(_tiles2.default.FLOOR);\n        }\n      }\n      this.tiles.push(row);\n    }\n  }\n\n  _createClass(Room, [{\n    key: "setPosition",\n    value: function setPosition(x, y) {\n      this.x = x;\n      this.y = y;\n      this.left = x;\n      this.right = x + (this.width - 1);\n      this.top = y;\n      this.bottom = y + (this.height - 1);\n      this.centerX = x + Math.floor(this.width / 2);\n      this.centerY = y + Math.floor(this.height / 2);\n    }\n  }, {\n    key: "getDoorLocations",\n    value: function getDoorLocations() {\n      var doors = [];\n\n      // find all the doors and add their positions to the list\n      for (var y = 0; y < this.height; y++) {\n        for (var x = 0; x < this.width; x++) {\n          if (this.tiles[y][x] == _tiles2.default.DOOR) {\n            doors.push({ x: x, y: y });\n          }\n        }\n      }\n\n      return doors;\n    }\n  }, {\n    key: "overlaps",\n    value: function overlaps(otherRoom) {\n      if (this.right < otherRoom.left) return false;else if (this.left > otherRoom.right) return false;else if (this.bottom < otherRoom.top) return false;else if (this.top > otherRoom.bottom) return false;else return true;\n    }\n  }, {\n    key: "isConnectedTo",\n    value: function isConnectedTo(otherRoom) {\n      // iterate the doors in room1 and see if any are also a door in room2\n      var doors = this.getDoorLocations();\n      for (var i = 0; i < doors.length; i++) {\n        var d = doors[i];\n\n        // move the door into "world space" using room1\'s position\n        d.x += this.x;\n        d.y += this.y;\n\n        // move the door into room2 space by subtracting room2\'s position\n        d.x -= otherRoom.x;\n        d.y -= otherRoom.y;\n\n        // make sure the position is valid for room2\'s tiles array\n        if (d.x < 0 || d.x > otherRoom.width - 1 || d.y < 0 || d.y > otherRoom.height - 1) {\n          continue;\n        }\n\n        // see if the tile is a door; if so this is a door from room1 to room2 so the rooms are connected\n        if (otherRoom.tiles[d.y][d.x] == _tiles2.default.DOOR) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }]);\n\n  return Room;\n}();\n\nexports.default = Room;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvUm9vbS5qcz81MDdiIl0sIm5hbWVzIjpbIlJvb20iLCJ3aWR0aCIsImhlaWdodCIsInNldFBvc2l0aW9uIiwiZG9vcnMiLCJ0aWxlcyIsInkiLCJyb3ciLCJ4IiwicHVzaCIsIldBTEwiLCJGTE9PUiIsImxlZnQiLCJyaWdodCIsInRvcCIsImJvdHRvbSIsImNlbnRlclgiLCJNYXRoIiwiZmxvb3IiLCJjZW50ZXJZIiwiRE9PUiIsIm90aGVyUm9vbSIsImdldERvb3JMb2NhdGlvbnMiLCJpIiwibGVuZ3RoIiwiZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7SUFFcUJBLEk7QUFDbkIsZ0JBQVlDLEtBQVosRUFBbUJDLE1BQW5CLEVBQTJCO0FBQUE7O0FBQ3pCLFNBQUtELEtBQUwsR0FBYUEsS0FBYjtBQUNBLFNBQUtDLE1BQUwsR0FBY0EsTUFBZDs7QUFFQSxTQUFLQyxXQUFMLENBQWlCLENBQWpCLEVBQW9CLENBQXBCOztBQUVBLFNBQUtDLEtBQUwsR0FBYSxFQUFiO0FBQ0EsU0FBS0MsS0FBTCxHQUFhLEVBQWI7O0FBRUE7QUFDQSxTQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSSxLQUFLSixNQUF6QixFQUFpQ0ksR0FBakMsRUFBc0M7QUFDcEMsVUFBSUMsTUFBTSxFQUFWO0FBQ0EsV0FBSyxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLElBQUksS0FBS1AsS0FBekIsRUFBZ0NPLEdBQWhDLEVBQXFDO0FBQ25DLFlBQUlGLEtBQUssQ0FBTCxJQUFVQSxLQUFLLEtBQUtKLE1BQUwsR0FBYyxDQUE3QixJQUFrQ00sS0FBSyxDQUF2QyxJQUE0Q0EsS0FBSyxLQUFLUCxLQUFMLEdBQWEsQ0FBbEUsRUFBcUU7QUFDbkVNLGNBQUlFLElBQUosQ0FBUyxnQkFBTUMsSUFBZjtBQUNELFNBRkQsTUFFTztBQUNMSCxjQUFJRSxJQUFKLENBQVMsZ0JBQU1FLEtBQWY7QUFDRDtBQUNGO0FBQ0QsV0FBS04sS0FBTCxDQUFXSSxJQUFYLENBQWdCRixHQUFoQjtBQUNEO0FBQ0Y7Ozs7Z0NBRVdDLEMsRUFBR0YsQyxFQUFHO0FBQ2hCLFdBQUtFLENBQUwsR0FBU0EsQ0FBVDtBQUNBLFdBQUtGLENBQUwsR0FBU0EsQ0FBVDtBQUNBLFdBQUtNLElBQUwsR0FBWUosQ0FBWjtBQUNBLFdBQUtLLEtBQUwsR0FBYUwsS0FBSyxLQUFLUCxLQUFMLEdBQWEsQ0FBbEIsQ0FBYjtBQUNBLFdBQUthLEdBQUwsR0FBV1IsQ0FBWDtBQUNBLFdBQUtTLE1BQUwsR0FBY1QsS0FBSyxLQUFLSixNQUFMLEdBQWMsQ0FBbkIsQ0FBZDtBQUNBLFdBQUtjLE9BQUwsR0FBZVIsSUFBSVMsS0FBS0MsS0FBTCxDQUFXLEtBQUtqQixLQUFMLEdBQWEsQ0FBeEIsQ0FBbkI7QUFDQSxXQUFLa0IsT0FBTCxHQUFlYixJQUFJVyxLQUFLQyxLQUFMLENBQVcsS0FBS2hCLE1BQUwsR0FBYyxDQUF6QixDQUFuQjtBQUNEOzs7dUNBRWtCO0FBQ2pCLFVBQUlFLFFBQVEsRUFBWjs7QUFFQTtBQUNBLFdBQUssSUFBSUUsSUFBSSxDQUFiLEVBQWdCQSxJQUFJLEtBQUtKLE1BQXpCLEVBQWlDSSxHQUFqQyxFQUFzQztBQUNwQyxhQUFLLElBQUlFLElBQUksQ0FBYixFQUFnQkEsSUFBSSxLQUFLUCxLQUF6QixFQUFnQ08sR0FBaEMsRUFBcUM7QUFDbkMsY0FBSSxLQUFLSCxLQUFMLENBQVdDLENBQVgsRUFBY0UsQ0FBZCxLQUFvQixnQkFBTVksSUFBOUIsRUFBb0M7QUFDbENoQixrQkFBTUssSUFBTixDQUFXLEVBQUVELEdBQUdBLENBQUwsRUFBUUYsR0FBR0EsQ0FBWCxFQUFYO0FBQ0Q7QUFDRjtBQUNGOztBQUVELGFBQU9GLEtBQVA7QUFDRDs7OzZCQUVRaUIsUyxFQUFXO0FBQ2xCLFVBQUksS0FBS1IsS0FBTCxHQUFhUSxVQUFVVCxJQUEzQixFQUFpQyxPQUFPLEtBQVAsQ0FBakMsS0FDSyxJQUFJLEtBQUtBLElBQUwsR0FBWVMsVUFBVVIsS0FBMUIsRUFBaUMsT0FBTyxLQUFQLENBQWpDLEtBQ0EsSUFBSSxLQUFLRSxNQUFMLEdBQWNNLFVBQVVQLEdBQTVCLEVBQWlDLE9BQU8sS0FBUCxDQUFqQyxLQUNBLElBQUksS0FBS0EsR0FBTCxHQUFXTyxVQUFVTixNQUF6QixFQUFpQyxPQUFPLEtBQVAsQ0FBakMsS0FDQSxPQUFPLElBQVA7QUFDTjs7O2tDQUVhTSxTLEVBQVc7QUFDdkI7QUFDQSxVQUFJakIsUUFBUSxLQUFLa0IsZ0JBQUwsRUFBWjtBQUNBLFdBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJbkIsTUFBTW9CLE1BQTFCLEVBQWtDRCxHQUFsQyxFQUF1QztBQUNyQyxZQUFJRSxJQUFJckIsTUFBTW1CLENBQU4sQ0FBUjs7QUFFQTtBQUNBRSxVQUFFakIsQ0FBRixJQUFPLEtBQUtBLENBQVo7QUFDQWlCLFVBQUVuQixDQUFGLElBQU8sS0FBS0EsQ0FBWjs7QUFFQTtBQUNBbUIsVUFBRWpCLENBQUYsSUFBT2EsVUFBVWIsQ0FBakI7QUFDQWlCLFVBQUVuQixDQUFGLElBQU9lLFVBQVVmLENBQWpCOztBQUVBO0FBQ0EsWUFBSW1CLEVBQUVqQixDQUFGLEdBQU0sQ0FBTixJQUFXaUIsRUFBRWpCLENBQUYsR0FBTWEsVUFBVXBCLEtBQVYsR0FBa0IsQ0FBbkMsSUFBd0N3QixFQUFFbkIsQ0FBRixHQUFNLENBQTlDLElBQW1EbUIsRUFBRW5CLENBQUYsR0FBTWUsVUFBVW5CLE1BQVYsR0FBbUIsQ0FBaEYsRUFBbUY7QUFDakY7QUFDRDs7QUFFRDtBQUNBLFlBQUltQixVQUFVaEIsS0FBVixDQUFnQm9CLEVBQUVuQixDQUFsQixFQUFxQm1CLEVBQUVqQixDQUF2QixLQUE2QixnQkFBTVksSUFBdkMsRUFBNkM7QUFDM0MsaUJBQU8sSUFBUDtBQUNEO0FBQ0Y7O0FBRUQsYUFBTyxLQUFQO0FBQ0Q7Ozs7OztrQkFwRmtCcEIsSSIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRJTEVTIGZyb20gXCIuL3RpbGVzLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb29tIHtcclxuICBjb25zdHJ1Y3Rvcih3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICB0aGlzLndpZHRoID0gd2lkdGg7XHJcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcclxuXHJcbiAgICB0aGlzLnNldFBvc2l0aW9uKDAsIDApO1xyXG5cclxuICAgIHRoaXMuZG9vcnMgPSBbXTtcclxuICAgIHRoaXMudGlsZXMgPSBbXTtcclxuXHJcbiAgICAvLyBTdXJyb3VuZCB0aGUgcm9vbSB3aXRoIHdhbGxzLCBhbmQgZmlsbCB0aGUgcmVzdCB3aXRoIGZsb29ycy5cclxuICAgIGZvciAodmFyIHkgPSAwOyB5IDwgdGhpcy5oZWlnaHQ7IHkrKykge1xyXG4gICAgICB2YXIgcm93ID0gW107XHJcbiAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgdGhpcy53aWR0aDsgeCsrKSB7XHJcbiAgICAgICAgaWYgKHkgPT0gMCB8fCB5ID09IHRoaXMuaGVpZ2h0IC0gMSB8fCB4ID09IDAgfHwgeCA9PSB0aGlzLndpZHRoIC0gMSkge1xyXG4gICAgICAgICAgcm93LnB1c2goVElMRVMuV0FMTCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJvdy5wdXNoKFRJTEVTLkZMT09SKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy50aWxlcy5wdXNoKHJvdyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRQb3NpdGlvbih4LCB5KSB7XHJcbiAgICB0aGlzLnggPSB4O1xyXG4gICAgdGhpcy55ID0geTtcclxuICAgIHRoaXMubGVmdCA9IHg7XHJcbiAgICB0aGlzLnJpZ2h0ID0geCArICh0aGlzLndpZHRoIC0gMSk7XHJcbiAgICB0aGlzLnRvcCA9IHk7XHJcbiAgICB0aGlzLmJvdHRvbSA9IHkgKyAodGhpcy5oZWlnaHQgLSAxKTtcclxuICAgIHRoaXMuY2VudGVyWCA9IHggKyBNYXRoLmZsb29yKHRoaXMud2lkdGggLyAyKTtcclxuICAgIHRoaXMuY2VudGVyWSA9IHkgKyBNYXRoLmZsb29yKHRoaXMuaGVpZ2h0IC8gMik7XHJcbiAgfVxyXG5cclxuICBnZXREb29yTG9jYXRpb25zKCkge1xyXG4gICAgdmFyIGRvb3JzID0gW107XHJcblxyXG4gICAgLy8gZmluZCBhbGwgdGhlIGRvb3JzIGFuZCBhZGQgdGhlaXIgcG9zaXRpb25zIHRvIHRoZSBsaXN0XHJcbiAgICBmb3IgKHZhciB5ID0gMDsgeSA8IHRoaXMuaGVpZ2h0OyB5KyspIHtcclxuICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCB0aGlzLndpZHRoOyB4KyspIHtcclxuICAgICAgICBpZiAodGhpcy50aWxlc1t5XVt4XSA9PSBUSUxFUy5ET09SKSB7XHJcbiAgICAgICAgICBkb29ycy5wdXNoKHsgeDogeCwgeTogeSB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZG9vcnM7XHJcbiAgfVxyXG5cclxuICBvdmVybGFwcyhvdGhlclJvb20pIHtcclxuICAgIGlmICh0aGlzLnJpZ2h0IDwgb3RoZXJSb29tLmxlZnQpIHJldHVybiBmYWxzZTtcclxuICAgIGVsc2UgaWYgKHRoaXMubGVmdCA+IG90aGVyUm9vbS5yaWdodCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgZWxzZSBpZiAodGhpcy5ib3R0b20gPCBvdGhlclJvb20udG9wKSByZXR1cm4gZmFsc2U7XHJcbiAgICBlbHNlIGlmICh0aGlzLnRvcCA+IG90aGVyUm9vbS5ib3R0b20pIHJldHVybiBmYWxzZTtcclxuICAgIGVsc2UgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBpc0Nvbm5lY3RlZFRvKG90aGVyUm9vbSkge1xyXG4gICAgLy8gaXRlcmF0ZSB0aGUgZG9vcnMgaW4gcm9vbTEgYW5kIHNlZSBpZiBhbnkgYXJlIGFsc28gYSBkb29yIGluIHJvb20yXHJcbiAgICB2YXIgZG9vcnMgPSB0aGlzLmdldERvb3JMb2NhdGlvbnMoKTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZG9vcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgdmFyIGQgPSBkb29yc1tpXTtcclxuXHJcbiAgICAgIC8vIG1vdmUgdGhlIGRvb3IgaW50byBcIndvcmxkIHNwYWNlXCIgdXNpbmcgcm9vbTEncyBwb3NpdGlvblxyXG4gICAgICBkLnggKz0gdGhpcy54O1xyXG4gICAgICBkLnkgKz0gdGhpcy55O1xyXG5cclxuICAgICAgLy8gbW92ZSB0aGUgZG9vciBpbnRvIHJvb20yIHNwYWNlIGJ5IHN1YnRyYWN0aW5nIHJvb20yJ3MgcG9zaXRpb25cclxuICAgICAgZC54IC09IG90aGVyUm9vbS54O1xyXG4gICAgICBkLnkgLT0gb3RoZXJSb29tLnk7XHJcblxyXG4gICAgICAvLyBtYWtlIHN1cmUgdGhlIHBvc2l0aW9uIGlzIHZhbGlkIGZvciByb29tMidzIHRpbGVzIGFycmF5XHJcbiAgICAgIGlmIChkLnggPCAwIHx8IGQueCA+IG90aGVyUm9vbS53aWR0aCAtIDEgfHwgZC55IDwgMCB8fCBkLnkgPiBvdGhlclJvb20uaGVpZ2h0IC0gMSkge1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBzZWUgaWYgdGhlIHRpbGUgaXMgYSBkb29yOyBpZiBzbyB0aGlzIGlzIGEgZG9vciBmcm9tIHJvb20xIHRvIHJvb20yIHNvIHRoZSByb29tcyBhcmUgY29ubmVjdGVkXHJcbiAgICAgIGlmIChvdGhlclJvb20udGlsZXNbZC55XVtkLnhdID09IFRJTEVTLkRPT1IpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL1Jvb20uanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.debugRoomGrid = debugRoomGrid;\nexports.debugMap = debugMap;\n\nvar _tiles = __webpack_require__(0);\n\nvar _tiles2 = _interopRequireDefault(_tiles);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Debug by dumping a table to the console where each element in the map is the number of rooms in\n// that location\nfunction debugRoomGrid(dungeon) {\n  var table = dungeon.roomGrid.map(function (row) {\n    return row.map(function (elem) {\n      return ("" + elem.length).padStart(2);\n    });\n  });\n  console.log(table.map(function (row) {\n    return row.join(" ");\n  }).join("\\n"));\n}\n\n// Debug by returning a colored(!) table string where each tile in the map is represented with an\n// ASCII string\nfunction debugMap(dungeon) {\n  var _console;\n\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  config = Object.assign({}, {\n    empty: " ",\n    emptyColor: "rgb(0, 0, 0)",\n    wall: "#",\n    wallColor: "rgb(255, 0, 0)",\n    floor: "_",\n    floorColor: "rgb(150, 150, 150)",\n    door: ".",\n    doorColor: "rgb(0, 0, 255)",\n    fontSize: "15px"\n  }, config);\n\n  var string = "";\n  var styles = [];\n  for (var y = 0; y < dungeon.height; y += 1) {\n    for (var x = 0; x < dungeon.width; x += 1) {\n      var tile = dungeon.tiles[y][x];\n      if (tile === _tiles2.default.EMPTY) {\n        string += "%c" + config.empty;\n        styles.push("color: " + config.emptyColor + "; font-size: " + config.fontSize);\n      } else if (tile === _tiles2.default.WALL) {\n        string += "%c" + config.wall;\n        styles.push("color: " + config.wallColor + "; font-size: " + config.fontSize);\n      } else if (tile === _tiles2.default.FLOOR) {\n        string += "%c" + config.floor;\n        styles.push("color: " + config.floorColor + "; font-size: " + config.fontSize);\n      } else if (tile === _tiles2.default.DOOR) {\n        string += "%c" + config.door;\n        styles.push("color: " + config.doorColor + "; font-size: " + config.fontSize);\n      }\n      string += " ";\n    }\n    string += "\\n";\n  }\n  (_console = console).log.apply(_console, [string].concat(styles));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZGVidWcuanM/MTZjOSJdLCJuYW1lcyI6WyJkZWJ1Z1Jvb21HcmlkIiwiZGVidWdNYXAiLCJkdW5nZW9uIiwidGFibGUiLCJyb29tR3JpZCIsIm1hcCIsInJvdyIsImVsZW0iLCJsZW5ndGgiLCJwYWRTdGFydCIsImNvbnNvbGUiLCJsb2ciLCJqb2luIiwiY29uZmlnIiwiT2JqZWN0IiwiYXNzaWduIiwiZW1wdHkiLCJlbXB0eUNvbG9yIiwid2FsbCIsIndhbGxDb2xvciIsImZsb29yIiwiZmxvb3JDb2xvciIsImRvb3IiLCJkb29yQ29sb3IiLCJmb250U2l6ZSIsInN0cmluZyIsInN0eWxlcyIsInkiLCJoZWlnaHQiLCJ4Iiwid2lkdGgiLCJ0aWxlIiwidGlsZXMiLCJFTVBUWSIsInB1c2giLCJXQUxMIiwiRkxPT1IiLCJET09SIl0sIm1hcHBpbmdzIjoiOzs7OztRQUlnQkEsYSxHQUFBQSxhO1FBT0FDLFEsR0FBQUEsUTs7QUFYaEI7Ozs7OztBQUVBO0FBQ0E7QUFDTyxTQUFTRCxhQUFULENBQXVCRSxPQUF2QixFQUFnQztBQUNyQyxNQUFNQyxRQUFRRCxRQUFRRSxRQUFSLENBQWlCQyxHQUFqQixDQUFxQjtBQUFBLFdBQU9DLElBQUlELEdBQUosQ0FBUTtBQUFBLGFBQVEsTUFBR0UsS0FBS0MsTUFBUixFQUFpQkMsUUFBakIsQ0FBMEIsQ0FBMUIsQ0FBUjtBQUFBLEtBQVIsQ0FBUDtBQUFBLEdBQXJCLENBQWQ7QUFDQUMsVUFBUUMsR0FBUixDQUFZUixNQUFNRSxHQUFOLENBQVU7QUFBQSxXQUFPQyxJQUFJTSxJQUFKLENBQVMsR0FBVCxDQUFQO0FBQUEsR0FBVixFQUFnQ0EsSUFBaEMsQ0FBcUMsSUFBckMsQ0FBWjtBQUNEOztBQUVEO0FBQ0E7QUFDTyxTQUFTWCxRQUFULENBQWtCQyxPQUFsQixFQUF3QztBQUFBOztBQUFBLE1BQWJXLE1BQWEsdUVBQUosRUFBSTs7QUFDN0NBLFdBQVNDLE9BQU9DLE1BQVAsQ0FDUCxFQURPLEVBRVA7QUFDRUMsV0FBTyxHQURUO0FBRUVDLGdCQUFZLGNBRmQ7QUFHRUMsVUFBTSxHQUhSO0FBSUVDLGVBQVcsZ0JBSmI7QUFLRUMsV0FBTyxHQUxUO0FBTUVDLGdCQUFZLG9CQU5kO0FBT0VDLFVBQU0sR0FQUjtBQVFFQyxlQUFXLGdCQVJiO0FBU0VDLGNBQVU7QUFUWixHQUZPLEVBYVBYLE1BYk8sQ0FBVDs7QUFnQkEsTUFBSVksU0FBUyxFQUFiO0FBQ0EsTUFBSUMsU0FBUyxFQUFiO0FBQ0EsT0FBSyxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLElBQUl6QixRQUFRMEIsTUFBNUIsRUFBb0NELEtBQUssQ0FBekMsRUFBNEM7QUFDMUMsU0FBSyxJQUFJRSxJQUFJLENBQWIsRUFBZ0JBLElBQUkzQixRQUFRNEIsS0FBNUIsRUFBbUNELEtBQUssQ0FBeEMsRUFBMkM7QUFDekMsVUFBTUUsT0FBTzdCLFFBQVE4QixLQUFSLENBQWNMLENBQWQsRUFBaUJFLENBQWpCLENBQWI7QUFDQSxVQUFJRSxTQUFTLGdCQUFNRSxLQUFuQixFQUEwQjtBQUN4QlIseUJBQWVaLE9BQU9HLEtBQXRCO0FBQ0FVLGVBQU9RLElBQVAsYUFBc0JyQixPQUFPSSxVQUE3QixxQkFBdURKLE9BQU9XLFFBQTlEO0FBQ0QsT0FIRCxNQUdPLElBQUlPLFNBQVMsZ0JBQU1JLElBQW5CLEVBQXlCO0FBQzlCVix5QkFBZVosT0FBT0ssSUFBdEI7QUFDQVEsZUFBT1EsSUFBUCxhQUFzQnJCLE9BQU9NLFNBQTdCLHFCQUFzRE4sT0FBT1csUUFBN0Q7QUFDRCxPQUhNLE1BR0EsSUFBSU8sU0FBUyxnQkFBTUssS0FBbkIsRUFBMEI7QUFDL0JYLHlCQUFlWixPQUFPTyxLQUF0QjtBQUNBTSxlQUFPUSxJQUFQLGFBQXNCckIsT0FBT1EsVUFBN0IscUJBQXVEUixPQUFPVyxRQUE5RDtBQUNELE9BSE0sTUFHQSxJQUFJTyxTQUFTLGdCQUFNTSxJQUFuQixFQUF5QjtBQUM5QloseUJBQWVaLE9BQU9TLElBQXRCO0FBQ0FJLGVBQU9RLElBQVAsYUFBc0JyQixPQUFPVSxTQUE3QixxQkFBc0RWLE9BQU9XLFFBQTdEO0FBQ0Q7QUFDREMsZ0JBQVUsR0FBVjtBQUNEO0FBQ0RBLGNBQVUsSUFBVjtBQUNEO0FBQ0QsdUJBQVFkLEdBQVIsa0JBQVljLE1BQVosU0FBdUJDLE1BQXZCO0FBQ0QiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUSUxFUyBmcm9tIFwiLi90aWxlc1wiO1xyXG5cclxuLy8gRGVidWcgYnkgZHVtcGluZyBhIHRhYmxlIHRvIHRoZSBjb25zb2xlIHdoZXJlIGVhY2ggZWxlbWVudCBpbiB0aGUgbWFwIGlzIHRoZSBudW1iZXIgb2Ygcm9vbXMgaW5cclxuLy8gdGhhdCBsb2NhdGlvblxyXG5leHBvcnQgZnVuY3Rpb24gZGVidWdSb29tR3JpZChkdW5nZW9uKSB7XHJcbiAgY29uc3QgdGFibGUgPSBkdW5nZW9uLnJvb21HcmlkLm1hcChyb3cgPT4gcm93Lm1hcChlbGVtID0+IGAke2VsZW0ubGVuZ3RofWAucGFkU3RhcnQoMikpKTtcclxuICBjb25zb2xlLmxvZyh0YWJsZS5tYXAocm93ID0+IHJvdy5qb2luKFwiIFwiKSkuam9pbihcIlxcblwiKSk7XHJcbn1cclxuXHJcbi8vIERlYnVnIGJ5IHJldHVybmluZyBhIGNvbG9yZWQoISkgdGFibGUgc3RyaW5nIHdoZXJlIGVhY2ggdGlsZSBpbiB0aGUgbWFwIGlzIHJlcHJlc2VudGVkIHdpdGggYW5cclxuLy8gQVNDSUkgc3RyaW5nXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWJ1Z01hcChkdW5nZW9uLCBjb25maWcgPSB7fSkge1xyXG4gIGNvbmZpZyA9IE9iamVjdC5hc3NpZ24oXHJcbiAgICB7fSxcclxuICAgIHtcclxuICAgICAgZW1wdHk6IFwiIFwiLFxyXG4gICAgICBlbXB0eUNvbG9yOiBcInJnYigwLCAwLCAwKVwiLFxyXG4gICAgICB3YWxsOiBcIiNcIixcclxuICAgICAgd2FsbENvbG9yOiBcInJnYigyNTUsIDAsIDApXCIsXHJcbiAgICAgIGZsb29yOiBcIl9cIixcclxuICAgICAgZmxvb3JDb2xvcjogXCJyZ2IoMTUwLCAxNTAsIDE1MClcIixcclxuICAgICAgZG9vcjogXCIuXCIsXHJcbiAgICAgIGRvb3JDb2xvcjogXCJyZ2IoMCwgMCwgMjU1KVwiLFxyXG4gICAgICBmb250U2l6ZTogXCIxNXB4XCJcclxuICAgIH0sXHJcbiAgICBjb25maWdcclxuICApO1xyXG5cclxuICBsZXQgc3RyaW5nID0gXCJcIjtcclxuICBsZXQgc3R5bGVzID0gW107XHJcbiAgZm9yIChsZXQgeSA9IDA7IHkgPCBkdW5nZW9uLmhlaWdodDsgeSArPSAxKSB7XHJcbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IGR1bmdlb24ud2lkdGg7IHggKz0gMSkge1xyXG4gICAgICBjb25zdCB0aWxlID0gZHVuZ2Vvbi50aWxlc1t5XVt4XTtcclxuICAgICAgaWYgKHRpbGUgPT09IFRJTEVTLkVNUFRZKSB7XHJcbiAgICAgICAgc3RyaW5nICs9IGAlYyR7Y29uZmlnLmVtcHR5fWA7XHJcbiAgICAgICAgc3R5bGVzLnB1c2goYGNvbG9yOiAke2NvbmZpZy5lbXB0eUNvbG9yfTsgZm9udC1zaXplOiAke2NvbmZpZy5mb250U2l6ZX1gKTtcclxuICAgICAgfSBlbHNlIGlmICh0aWxlID09PSBUSUxFUy5XQUxMKSB7XHJcbiAgICAgICAgc3RyaW5nICs9IGAlYyR7Y29uZmlnLndhbGx9YDtcclxuICAgICAgICBzdHlsZXMucHVzaChgY29sb3I6ICR7Y29uZmlnLndhbGxDb2xvcn07IGZvbnQtc2l6ZTogJHtjb25maWcuZm9udFNpemV9YCk7XHJcbiAgICAgIH0gZWxzZSBpZiAodGlsZSA9PT0gVElMRVMuRkxPT1IpIHtcclxuICAgICAgICBzdHJpbmcgKz0gYCVjJHtjb25maWcuZmxvb3J9YDtcclxuICAgICAgICBzdHlsZXMucHVzaChgY29sb3I6ICR7Y29uZmlnLmZsb29yQ29sb3J9OyBmb250LXNpemU6ICR7Y29uZmlnLmZvbnRTaXplfWApO1xyXG4gICAgICB9IGVsc2UgaWYgKHRpbGUgPT09IFRJTEVTLkRPT1IpIHtcclxuICAgICAgICBzdHJpbmcgKz0gYCVjJHtjb25maWcuZG9vcn1gO1xyXG4gICAgICAgIHN0eWxlcy5wdXNoKGBjb2xvcjogJHtjb25maWcuZG9vckNvbG9yfTsgZm9udC1zaXplOiAke2NvbmZpZy5mb250U2l6ZX1gKTtcclxuICAgICAgfVxyXG4gICAgICBzdHJpbmcgKz0gXCIgXCI7XHJcbiAgICB9XHJcbiAgICBzdHJpbmcgKz0gXCJcXG5cIjtcclxuICB9XHJcbiAgY29uc29sZS5sb2coc3RyaW5nLCAuLi5zdHlsZXMpO1xyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9kZWJ1Zy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n')}])});